syntax = "proto3";
package thingspect.api;

import "common/rule.proto";
import "common/datapoint.proto";
import "common/status.proto";
import "common/device.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/thingspect/api/go/api";

// RuleAlarmService contains functions to query and modify rules.
service RuleAlarmService {
  // Create a rule. Rules define how events are generated.
  rpc CreateRule(CreateRuleRequest) returns (common.Rule) {
    option (google.api.http) = {
      post: "/v1/rules"
      body: "rule"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".thingspect.common.Rule"
            }
          }
        }
      }
    };
  }

  // Create an alarm. Alarms define how alerts are generated.
  rpc CreateAlarm(CreateAlarmRequest) returns (Alarm) {
    option (google.api.http) = {
      post: "/v1/rules/{alarm.rule_id}/alarms"
      body: "alarm"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".thingspect.api.Alarm"
            }
          }
        }
      }
    };
  }

  // Get a rule by ID. Rules define how events are generated.
  rpc GetRule(GetRuleRequest) returns (common.Rule) {
    option (google.api.http) = {
      get: "/v1/rules/{id}"
    };
  }

  // Get an alarm by ID. Alarms define how alerts are generated.
  rpc GetAlarm(GetAlarmRequest) returns (Alarm) {
    option (google.api.http) = {
      get: "/v1/rules/{rule_id}/alarms/{id}"
    };
  }

  // Update a rule. Rules define how events are generated.
  rpc UpdateRule(UpdateRuleRequest) returns (common.Rule) {
    option (google.api.http) = {
      put: "/v1/rules/{rule.id}"
      body: "rule"
      additional_bindings {
        patch: "/v1/rules/{rule.id}"
        body: "rule"
      }
    };
  }

  // Update an alarm. Alarms define how alerts are generated.
  rpc UpdateAlarm(UpdateAlarmRequest) returns (Alarm) {
    option (google.api.http) = {
      put: "/v1/rules/{alarm.rule_id}/alarms/{alarm.id}"
      body: "alarm"
      additional_bindings {
        patch: "/v1/rules/{alarm.rule_id}/alarms/{alarm.id}"
        body: "alarm"
      }
    };
  }

  // Delete a rule by ID. Rules define how events are generated.
  rpc DeleteRule(DeleteRuleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/rules/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // Delete an alarm by ID. Alarms define how alerts are generated.
  rpc DeleteAlarm(DeleteAlarmRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/rules/{rule_id}/alarms/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // List all rules. Rules define how events are generated.
  rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
    option (google.api.http) = {
      get: "/v1/rules"
    };
  }

  // List alarms. Alarms define how alerts are generated.
  rpc ListAlarms(ListAlarmsRequest) returns (ListAlarmsResponse) {
    option (google.api.http) = {
      get: "/v1/rules/{rule_id}/alarms"
      additional_bindings {
        get: "/v1/rules/alarms"
      }
    };
  }

  // Test a rule. Rules define how events are generated.
  rpc TestRule(TestRuleRequest) returns (TestRuleResponse) {
    option (google.api.http) = {
      post: "/v1/rules/test"
      body: "*"
    };
  }

  // Test an alarm. Alarms define how alerts are generated.
  rpc TestAlarm(TestAlarmRequest) returns (TestAlarmResponse) {
    option (google.api.http) = {
      post: "/v1/rules/alarms/test"
      body: "*"
    };
  }
}

// CreateRuleRequest is sent to create a rule.
message CreateRuleRequest {
  // Rule message to create.
  common.Rule rule = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// GetRuleRequest is sent to get a rule.
message GetRuleRequest {
  // Rule ID (UUID) to get.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// UpdateRuleRequest is sent to update a rule.
message UpdateRuleRequest {
  // Rule message to update.
  common.Rule rule = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteRuleRequest is sent to delete a rule.
message DeleteRuleRequest {
  // Rule ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListRulesRequest is sent to list rules.
message ListRulesRequest {
  // Number of rules to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32 = {gte: 0, lte: 250}];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;
}

// ListRulesResponse is sent in response to a rule list.
message ListRulesResponse {
  // Rule array, ordered by ascending created_at timestamp.
  repeated common.Rule rules = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Total number of rules available.
  int32 total_size = 3;
}

// TestRuleRequest is sent to test a rule.
message TestRuleRequest {
  // Data point to test against a rule.
  common.DataPoint point = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Rule message to test.
  common.Rule rule = 2 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// TestRuleResponse is sent in response to a rule test.
message TestRuleResponse {
  // Result of the rule evaluation.
  bool result = 1;
}

// AlarmType represents the type of alarm.
enum AlarmType {
  // Alarm type is not specified.
  ALARM_TYPE_UNSPECIFIED = 0;

  // Push notification via mobile application.
  APP = 1;
}

// Alarm represents an alarm as stored in the database.
message Alarm {
  // Alarm ID (UUID).
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Organization ID (UUID).
  string org_id = 2 [json_name = "orgID", (google.api.field_behavior) = OUTPUT_ONLY];

  // Rule ID (UUID).
  string rule_id = 3 [json_name = "ruleID", (google.api.field_behavior) = OUTPUT_ONLY];

  // Alarm name.
  string name = 4 [(validate.rules).string = {min_len: 5, max_len: 80}, (google.api.field_behavior) = REQUIRED];

  // Alarm status.
  common.Status status = 5 [(validate.rules).enum = {in: [3,6]}, (google.api.field_behavior) = REQUIRED];

  // Alarm type.
  AlarmType type = 6 [(validate.rules).enum = {in: [1]}, (google.api.field_behavior) = REQUIRED];

  // User tags to whom alerts are sent.
  repeated string user_tags = 7 [(validate.rules).repeated = {min_items: 1, unique: true}, (validate.rules).repeated.items.string.max_len = 255, (google.api.field_behavior) = REQUIRED];

  // Alarm subject template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/).
  string subject_template = 8 [(validate.rules).string.max_len = 1024, (google.api.field_behavior) = REQUIRED];

  // Alarm body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/).
  string body_template = 9 [(validate.rules).string.max_len = 4096, (google.api.field_behavior) = REQUIRED];

  // Alarm repeat interval, in minutes. Duration after which a duplicate event will cause an alert to be sent. Minimum is 1 minute, maximum is 14 days.
  int32 repeat_interval = 10 [(validate.rules).int32 = {gte: 1, lte: 20160}, (google.api.field_behavior) = REQUIRED];

  // Alarm creation timestamp.
  google.protobuf.Timestamp created_at = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Alarm modification timestamp.
  google.protobuf.Timestamp updated_at = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateAlarmRequest is sent to create an alarm.
message CreateAlarmRequest {
  // Alarm message to create.
  Alarm alarm = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// GetAlarmRequest is sent to get an alarm.
message GetAlarmRequest {
  // Alarm ID (UUID) to get.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];

  // Rule ID (UUID).
  string rule_id = 2 [json_name = "ruleID", (validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// UpdateAlarmRequest is sent to update an alarm.
message UpdateAlarmRequest {
  // Alarm message to update.
  Alarm alarm = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteAlarmRequest is sent to delete an alarm.
message DeleteAlarmRequest {
  // Alarm ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];

  // Rule ID (UUID).
  string rule_id = 2 [json_name = "ruleID", (validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListAlarmsRequest is sent to list alarms.
message ListAlarmsRequest {
  // Number of alarms to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32 = {gte: 0, lte: 250}];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;

  // Rule ID (UUID). If not specified, all rules are included.
  string rule_id = 3 [json_name = "ruleID"];
}

// ListAlarmsResponse is sent in response to an alarm list.
message ListAlarmsResponse {
  // Alarm array, ordered by ascending created_at timestamp.
  repeated Alarm alarms = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Total number of alarms available.
  int32 total_size = 3;
}

// TestAlarmRequest is sent to test an alarm.
message TestAlarmRequest {
  // Data point to test against an alarm.
  common.DataPoint point = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Rule to test against an alarm.
  common.Rule rule = 2 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Device to test against an alarm.
  common.Device device = 3 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Alarm message to test.
  Alarm alarm = 4 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// TestAlarmResponse is sent in response to an alarm test.
message TestAlarmResponse {
  // Result of the alarm generation. Subjects and bodies will be concatenated with ' - '.
  string result = 1;
}

syntax = "proto3";
package thingspect.api;

import "common/device.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/thingspect/api/go/api";

// DeviceService contains functions to query and modify devices.
service DeviceService {
  // Create a device. Devices are used to generate data points.
  rpc CreateDevice(CreateDeviceRequest) returns (common.Device) {
    option (google.api.http) = {
      post: "/v1/devices"
      body: "device"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".thingspect.common.Device"
            }
          }
        }
      }
    };
  }

  // Add LoRaWAN configuration to a device.
  rpc CreateDeviceLoRaWAN(CreateDeviceLoRaWANRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/devices/{id}/lorawan"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // Get a device by ID. Devices are used to generate data points.
  rpc GetDevice(GetDeviceRequest) returns (common.Device) {
    option (google.api.http) = {
      get: "/v1/devices/{id}"
    };
  }

  // Update a device. Devices are used to generate data points.
  rpc UpdateDevice(UpdateDeviceRequest) returns (common.Device) {
    option (google.api.http) = {
      put: "/v1/devices/{device.id}"
      body: "device"
      additional_bindings {
        patch: "/v1/devices/{device.id}"
        body: "device"
      }
    };
  }

  // Remove LoRaWAN configuration from a device.
  rpc DeleteDeviceLoRaWAN(DeleteDeviceLoRaWANRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/devices/{id}/lorawan"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // Delete a device by ID. Devices are used to generate data points.
  rpc DeleteDevice(DeleteDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/devices/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // List all devices. Devices are used to generate data points.
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {
    option (google.api.http) = {
      get: "/v1/devices"
    };
  }
}

// CreateDeviceRequest is sent to create a device.
message CreateDeviceRequest {
  // Device message to create.
  common.Device device = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// CreateDeviceLoRaWANRequest is sent to add LoRaWAN configuration to a device.
message CreateDeviceLoRaWANRequest {
  // GatewayLoRaWANType is sent to add LoRaWAN gateway configuration.
  message GatewayLoRaWANType {}

  // DeviceLoRaWANType is sent to add LoRaWAN device configuration.
  message DeviceLoRaWANType {
    // Device LoRaWAN 1.0.x application key.
    string app_key = 1 [(validate.rules).string.len = 32, (google.api.field_behavior) = REQUIRED];
  }

  // Device ID (UUID) to add LoRaWAN configuration.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = OUTPUT_ONLY];

  // LoRaWAN configuration type.
  oneof type_oneof {
    option (validate.required) = true;

    // Gateway LoRaWAN configuration type.
    GatewayLoRaWANType gateway_lorawan_type = 2 [json_name = "gatewayLoRaWANType"];

    // Device LoRaWAN configuration type.
    DeviceLoRaWANType device_lorawan_type = 3 [json_name = "deviceLoRaWANType"];
  }
}

// GetDeviceRequest is sent to get a device.
message GetDeviceRequest {
  // Device ID (UUID) to get.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// UpdateDeviceRequest is sent to update a device.
message UpdateDeviceRequest {
  // Device message to update.
  common.Device device = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteDeviceLoRaWANRequest is sent to remove LoRaWAN configuration from a device.
message DeleteDeviceLoRaWANRequest {
  // Device ID (UUID) to remove LoRaWAN configuration.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// DeleteDeviceRequest is sent to delete a device.
message DeleteDeviceRequest {
  // Device ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListDevicesRequest is sent to list devices.
message ListDevicesRequest {
  // Number of devices to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32.lte = 250];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;

  // Device tag. If not specified, all tags are included.
  string tag = 3 [(validate.rules).string.max_len = 255];
}

// ListDevicesResponse is sent in response to a device list.
message ListDevicesResponse {
  // Device array, ordered by ascending created_at timestamp.
  repeated common.Device devices = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Total number of devices available.
  int32 total_size = 3;
}

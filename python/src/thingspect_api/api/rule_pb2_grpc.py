# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api import rule_pb2 as api_dot_rule__pb2
from common import rule_pb2 as common_dot_rule__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class RuleServiceStub(object):
    """RuleService contains functions to query and modify rules.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRule = channel.unary_unary(
                '/thingspect.api.RuleService/CreateRule',
                request_serializer=api_dot_rule__pb2.CreateRuleRequest.SerializeToString,
                response_deserializer=common_dot_rule__pb2.Rule.FromString,
                )
        self.GetRule = channel.unary_unary(
                '/thingspect.api.RuleService/GetRule',
                request_serializer=api_dot_rule__pb2.GetRuleRequest.SerializeToString,
                response_deserializer=common_dot_rule__pb2.Rule.FromString,
                )
        self.UpdateRule = channel.unary_unary(
                '/thingspect.api.RuleService/UpdateRule',
                request_serializer=api_dot_rule__pb2.UpdateRuleRequest.SerializeToString,
                response_deserializer=common_dot_rule__pb2.Rule.FromString,
                )
        self.DeleteRule = channel.unary_unary(
                '/thingspect.api.RuleService/DeleteRule',
                request_serializer=api_dot_rule__pb2.DeleteRuleRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListRules = channel.unary_unary(
                '/thingspect.api.RuleService/ListRules',
                request_serializer=api_dot_rule__pb2.ListRulesRequest.SerializeToString,
                response_deserializer=api_dot_rule__pb2.ListRulesResponse.FromString,
                )
        self.TestRule = channel.unary_unary(
                '/thingspect.api.RuleService/TestRule',
                request_serializer=api_dot_rule__pb2.TestRuleRequest.SerializeToString,
                response_deserializer=api_dot_rule__pb2.TestRuleResponse.FromString,
                )


class RuleServiceServicer(object):
    """RuleService contains functions to query and modify rules.
    """

    def CreateRule(self, request, context):
        """Create a rule. Rules define how events are generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRule(self, request, context):
        """Get a rule by ID. Rules define how events are generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRule(self, request, context):
        """Update a rule. Rules define how events are generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRule(self, request, context):
        """Delete a rule by ID. Rules define how events are generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRules(self, request, context):
        """List all rules. Rules define how events are generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestRule(self, request, context):
        """Test a rule. Rules define how events are generated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RuleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRule': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRule,
                    request_deserializer=api_dot_rule__pb2.CreateRuleRequest.FromString,
                    response_serializer=common_dot_rule__pb2.Rule.SerializeToString,
            ),
            'GetRule': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRule,
                    request_deserializer=api_dot_rule__pb2.GetRuleRequest.FromString,
                    response_serializer=common_dot_rule__pb2.Rule.SerializeToString,
            ),
            'UpdateRule': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRule,
                    request_deserializer=api_dot_rule__pb2.UpdateRuleRequest.FromString,
                    response_serializer=common_dot_rule__pb2.Rule.SerializeToString,
            ),
            'DeleteRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRule,
                    request_deserializer=api_dot_rule__pb2.DeleteRuleRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListRules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRules,
                    request_deserializer=api_dot_rule__pb2.ListRulesRequest.FromString,
                    response_serializer=api_dot_rule__pb2.ListRulesResponse.SerializeToString,
            ),
            'TestRule': grpc.unary_unary_rpc_method_handler(
                    servicer.TestRule,
                    request_deserializer=api_dot_rule__pb2.TestRuleRequest.FromString,
                    response_serializer=api_dot_rule__pb2.TestRuleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'thingspect.api.RuleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RuleService(object):
    """RuleService contains functions to query and modify rules.
    """

    @staticmethod
    def CreateRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thingspect.api.RuleService/CreateRule',
            api_dot_rule__pb2.CreateRuleRequest.SerializeToString,
            common_dot_rule__pb2.Rule.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thingspect.api.RuleService/GetRule',
            api_dot_rule__pb2.GetRuleRequest.SerializeToString,
            common_dot_rule__pb2.Rule.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thingspect.api.RuleService/UpdateRule',
            api_dot_rule__pb2.UpdateRuleRequest.SerializeToString,
            common_dot_rule__pb2.Rule.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thingspect.api.RuleService/DeleteRule',
            api_dot_rule__pb2.DeleteRuleRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thingspect.api.RuleService/ListRules',
            api_dot_rule__pb2.ListRulesRequest.SerializeToString,
            api_dot_rule__pb2.ListRulesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/thingspect.api.RuleService/TestRule',
            api_dot_rule__pb2.TestRuleRequest.SerializeToString,
            api_dot_rule__pb2.TestRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

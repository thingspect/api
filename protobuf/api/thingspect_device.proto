syntax = "proto3";
package thingspect.api;

import "api/thingspect_status.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/thingspect/proto/go/api";

// DeviceService contains functions to query and modify devices.
service DeviceService {
  // Create a device. Devices generate data points.
  rpc CreateDevice(CreateDeviceRequest) returns (api.Device) {
    option (google.api.http) = {
      post: "/v1/devices"
      body: "device"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".thingspect.api.Device"
            }
          }
        }
      }
    };
  }

  // Add LoRaWAN configuration to a device.
  rpc CreateDeviceLoRaWAN(CreateDeviceLoRaWANRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/devices/{id}/lorawan"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // Get a device by ID. Devices generate data points.
  rpc GetDevice(GetDeviceRequest) returns (api.Device) {
    option (google.api.http) = {
      get: "/v1/devices/{id}"
    };
  }

  // Update a device. Devices generate data points.
  rpc UpdateDevice(UpdateDeviceRequest) returns (api.Device) {
    option (google.api.http) = {
      put: "/v1/devices/{device.id}"
      body: "device"
      additional_bindings {
        patch: "/v1/devices/{device.id}"
        body: "device"
      }
    };
  }

  // Remove LoRaWAN configuration from a device.
  rpc DeleteDeviceLoRaWAN(DeleteDeviceLoRaWANRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/devices/{id}/lorawan"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // Delete a device by ID. Devices generate data points.
  rpc DeleteDevice(DeleteDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/devices/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // List all devices. Devices generate data points.
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {
    option (google.api.http) = {
      get: "/v1/devices"
    };
  }
}

// Decoder represents the data payload decoder for a device.
enum Decoder {
  // Payloads will be passed through without decoding. Appropriate for devices that do not use decoders (MQTT, API, etc.).
  RAW = 0;

  // LoRaWAN gateway. Acts as a pass-through in the absence of device data payloads.
  GATEWAY = 1;

  // Radio Bridge Door/Window sensor with V1 firmware.
  RADIO_BRIDGE_DOOR_V1 = 2;

  // Radio Bridge Door/Window sensor with V2 firmware.
  RADIO_BRIDGE_DOOR_V2 = 3;

  // GlobalSat LS-111P CO2 sensor.
  GLOBALSAT_CO2 = 4;

  // GlobalSat LS-112P CO sensor.
  GLOBALSAT_CO = 5;

  // GlobalSat LS-113P PM2.5 sensor.
  GLOBALSAT_PM25 = 6;
}

// Device represents a device as stored in the database.
message Device {
  // Device ID (UUID).
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Organization ID (UUID).
  string org_id = 2 [json_name = "orgID", (google.api.field_behavior) = OUTPUT_ONLY];

  // Device unique ID.
  string uniq_id = 3 [json_name = "uniqID", (validate.rules).string = {min_len: 5, max_len: 40}];

  // Device name.
  string name = 4 [(validate.rules).string = {min_len: 5, max_len: 80}];

  // Device status.
  Status status = 5 [(validate.rules).enum = {in: [3, 6]}];

  // Authentication token (UUID). Will be generated at creation time, but can be updated afterward.
  string token = 6 [(validate.rules).string = {ignore_empty: true, uuid: true}];

  // Device data payload decoder.
  Decoder decoder = 7;

  // Device tags. Nested tags should be delimited by '/'.
  repeated string tags = 8 [(validate.rules).repeated.unique = true, (validate.rules).repeated.items.string.max_len = 255];

  // Device creation timestamp.
  google.protobuf.Timestamp created_at = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Device modification timestamp.
  google.protobuf.Timestamp updated_at = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateDeviceRequest is sent to create a device.
message CreateDeviceRequest {
  // Device message to create.
  Device device = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// CreateDeviceLoRaWANRequest is sent to add LoRaWAN configuration to a device.
message CreateDeviceLoRaWANRequest {
  // GatewayLoRaWANType is sent to add LoRaWAN gateway configuration.
  message GatewayLoRaWANType {}

  // DeviceLoRaWANType is sent to add LoRaWAN device configuration.
  message DeviceLoRaWANType {
    // Device LoRaWAN 1.0.x application key.
    string app_key = 1 [(validate.rules).string.len = 32, (google.api.field_behavior) = REQUIRED];
  }

  // Device ID (UUID) to add LoRaWAN configuration.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = OUTPUT_ONLY];

  // LoRaWAN configuration type.
  oneof type_oneof {
    option (validate.required) = true;

    // Gateway LoRaWAN configuration type.
    GatewayLoRaWANType gateway_lorawan_type = 2 [json_name = "gatewayLoRaWANType"];

    // Device LoRaWAN configuration type.
    DeviceLoRaWANType device_lorawan_type = 3 [json_name = "deviceLoRaWANType"];
  }
}

// GetDeviceRequest is sent to get a device.
message GetDeviceRequest {
  // Device ID (UUID) to get.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// UpdateDeviceRequest is sent to update a device.
message UpdateDeviceRequest {
  // Device message to update.
  Device device = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteDeviceLoRaWANRequest is sent to remove LoRaWAN configuration from a device.
message DeleteDeviceLoRaWANRequest {
  // Device ID (UUID) to remove LoRaWAN configuration.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// DeleteDeviceRequest is sent to delete a device.
message DeleteDeviceRequest {
  // Device ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListDevicesRequest is sent to list devices.
message ListDevicesRequest {
  // Number of devices to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32.lte = 250];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;

  // Device tag. If not specified, all tags are included.
  string tag = 3 [(validate.rules).string.max_len = 255];
}

// ListDevicesResponse is sent in response to a device list.
message ListDevicesResponse {
  // Device array, ordered by ascending created_at timestamp.
  repeated Device devices = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Total number of devices available.
  int32 total_size = 3;
}

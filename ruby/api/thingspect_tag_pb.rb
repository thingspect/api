# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api/thingspect_tag.proto

require 'google/protobuf'

require 'google/api/annotations_pb'


descriptor_data = "\n\x18\x61pi/thingspect_tag.proto\x12\x0ethingspect.api\x1a\x1cgoogle/api/annotations.proto\"\x11\n\x0fListTagsRequest\" \n\x10ListTagsResponse\x12\x0c\n\x04tags\x18\x01 \x03(\t2m\n\nTagService\x12_\n\x08ListTags\x12\x1f.thingspect.api.ListTagsRequest\x1a .thingspect.api.ListTagsResponse\"\x10\x82\xd3\xe4\x93\x02\n\x12\x08/v1/tagsB$Z\"github.com/thingspect/proto/go/apib\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Thingspect
  module Api
    ListTagsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("thingspect.api.ListTagsRequest").msgclass
    ListTagsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("thingspect.api.ListTagsResponse").msgclass
  end
end

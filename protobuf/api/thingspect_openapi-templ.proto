syntax = "proto3";
package thingspect.api;

import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/thingspect/proto/go/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Atlas"
    version: "APIVERSION"
    contact: {
      name: "Thingspect"
      url: "http://www.thingspect.com/"
      email: "info@thingspect.com"
    }
    description: "Getting started with the Atlas API:\n- Log in with `/v1/sessions/login` using your provided credentials. Click `Authorize` below and enter the returned token.\n- (Optional) Create an `BUILDER` role API key with `/v1/sessions/keys`. Re-authorize using the returned token.\n\nPublish and verify data points:\n- Create a device with `/v1/devices`. Include a notable `tag` for future use.\n- Publish data with `/v1/datapoints`. The `attr` and `val` fields can be arbitrarily chosen.\n- Inspect the received data with `/v1/datapoints/latest` using the device's `uniqID`.\n\nPublish data points and receive alerts:\n- Update your user with `/v1/users/{user.id}` to include a notable `tag`.\n- Create a rule with `/v1/rules`. The `deviceTag` field should match a tag of the device. The `expr` field can be simply `true`.\n- Create an alarm with `/v1/rules/{alarm.ruleID}/alarms`. The `type` field should match data that is available in the user's fields, such as `EMAIL`. The `userTags` field should include a tag of the user.\n- Publish data for the device, as done in the previous section. The `attr` field should match the `attr` of the rule.\n- Verify the alert is received by the user on the configured `type` method.\n- Inspect the created event with `/v1/events` using the device's `uniqID`.\n- Inspect the created alert with `/v1/alerts` using the device's `uniqID`.",
    license: {
      name: "ISC License";
      url: "https://github.com/thingspect/proto/blob/main/LICENSE";
    }
  }
  external_docs: {
    description: "Protobuf + gRPC definitions and example code";
    url: "https://github.com/thingspect/proto";
  }
  security_definitions: {
    security: {
      key: "TokenAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Enter your token (/v1/sessions/login) in the format **Bearer &lt;token&gt;**"
      }
    }
  }
  security: {
    security_requirement: {
      key: "TokenAuth"
      value: {}
    }
  }
};

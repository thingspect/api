// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/thingspect_device.proto

#include "api/thingspect_device.pb.h"
#include "api/thingspect_device.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace thingspect {
namespace api {

static const char* DeviceService_method_names[] = {
  "/thingspect.api.DeviceService/CreateDevice",
  "/thingspect.api.DeviceService/CreateDeviceLoRaWAN",
  "/thingspect.api.DeviceService/GetDevice",
  "/thingspect.api.DeviceService/UpdateDevice",
  "/thingspect.api.DeviceService/DeleteDeviceLoRaWAN",
  "/thingspect.api.DeviceService/DeleteDevice",
  "/thingspect.api.DeviceService/ListDevices",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel, options));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateDevice_(DeviceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDeviceLoRaWAN_(DeviceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevice_(DeviceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDevice_(DeviceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDeviceLoRaWAN_(DeviceService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDevice_(DeviceService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDevices_(DeviceService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceService::Stub::CreateDevice(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceRequest& request, ::thingspect::api::Device* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::CreateDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDevice_, context, request, response);
}

void DeviceService::Stub::async::CreateDevice(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceRequest* request, ::thingspect::api::Device* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::CreateDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::CreateDevice(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceRequest* request, ::thingspect::api::Device* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Device>* DeviceService::Stub::PrepareAsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Device, ::thingspect::api::CreateDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Device>* DeviceService::Stub::AsyncCreateDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::CreateDeviceLoRaWAN(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceLoRaWANRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::CreateDeviceLoRaWANRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDeviceLoRaWAN_, context, request, response);
}

void DeviceService::Stub::async::CreateDeviceLoRaWAN(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceLoRaWANRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::CreateDeviceLoRaWANRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDeviceLoRaWAN_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::CreateDeviceLoRaWAN(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceLoRaWANRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDeviceLoRaWAN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncCreateDeviceLoRaWANRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceLoRaWANRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::thingspect::api::CreateDeviceLoRaWANRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDeviceLoRaWAN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncCreateDeviceLoRaWANRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateDeviceLoRaWANRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDeviceLoRaWANRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::GetDevice(::grpc::ClientContext* context, const ::thingspect::api::GetDeviceRequest& request, ::thingspect::api::Device* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::GetDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevice_, context, request, response);
}

void DeviceService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::thingspect::api::GetDeviceRequest* request, ::thingspect::api::Device* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::GetDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetDevice(::grpc::ClientContext* context, const ::thingspect::api::GetDeviceRequest* request, ::thingspect::api::Device* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Device>* DeviceService::Stub::PrepareAsyncGetDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Device, ::thingspect::api::GetDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Device>* DeviceService::Stub::AsyncGetDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::UpdateDevice(::grpc::ClientContext* context, const ::thingspect::api::UpdateDeviceRequest& request, ::thingspect::api::Device* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::UpdateDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDevice_, context, request, response);
}

void DeviceService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::thingspect::api::UpdateDeviceRequest* request, ::thingspect::api::Device* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::UpdateDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::UpdateDevice(::grpc::ClientContext* context, const ::thingspect::api::UpdateDeviceRequest* request, ::thingspect::api::Device* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Device>* DeviceService::Stub::PrepareAsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Device, ::thingspect::api::UpdateDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Device>* DeviceService::Stub::AsyncUpdateDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::DeleteDeviceLoRaWAN(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceLoRaWANRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::DeleteDeviceLoRaWANRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDeviceLoRaWAN_, context, request, response);
}

void DeviceService::Stub::async::DeleteDeviceLoRaWAN(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceLoRaWANRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::DeleteDeviceLoRaWANRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDeviceLoRaWAN_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::DeleteDeviceLoRaWAN(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceLoRaWANRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDeviceLoRaWAN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncDeleteDeviceLoRaWANRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceLoRaWANRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::thingspect::api::DeleteDeviceLoRaWANRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDeviceLoRaWAN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncDeleteDeviceLoRaWANRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceLoRaWANRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDeviceLoRaWANRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::DeleteDevice(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::DeleteDeviceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDevice_, context, request, response);
}

void DeviceService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::DeleteDeviceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::DeleteDevice(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::PrepareAsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::thingspect::api::DeleteDeviceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DeviceService::Stub::AsyncDeleteDeviceRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::ListDevices(::grpc::ClientContext* context, const ::thingspect::api::ListDevicesRequest& request, ::thingspect::api::ListDevicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::ListDevicesRequest, ::thingspect::api::ListDevicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDevices_, context, request, response);
}

void DeviceService::Stub::async::ListDevices(::grpc::ClientContext* context, const ::thingspect::api::ListDevicesRequest* request, ::thingspect::api::ListDevicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::ListDevicesRequest, ::thingspect::api::ListDevicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDevices_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::ListDevices(::grpc::ClientContext* context, const ::thingspect::api::ListDevicesRequest* request, ::thingspect::api::ListDevicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDevices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListDevicesResponse>* DeviceService::Stub::PrepareAsyncListDevicesRaw(::grpc::ClientContext* context, const ::thingspect::api::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::ListDevicesResponse, ::thingspect::api::ListDevicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDevices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListDevicesResponse>* DeviceService::Stub::AsyncListDevicesRaw(::grpc::ClientContext* context, const ::thingspect::api::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDevicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::thingspect::api::CreateDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::CreateDeviceRequest* req,
             ::thingspect::api::Device* resp) {
               return service->CreateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::thingspect::api::CreateDeviceLoRaWANRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::CreateDeviceLoRaWANRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->CreateDeviceLoRaWAN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::thingspect::api::GetDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::GetDeviceRequest* req,
             ::thingspect::api::Device* resp) {
               return service->GetDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::thingspect::api::UpdateDeviceRequest, ::thingspect::api::Device, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::UpdateDeviceRequest* req,
             ::thingspect::api::Device* resp) {
               return service->UpdateDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::thingspect::api::DeleteDeviceLoRaWANRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::DeleteDeviceLoRaWANRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteDeviceLoRaWAN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::thingspect::api::DeleteDeviceRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::DeleteDeviceRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::thingspect::api::ListDevicesRequest, ::thingspect::api::ListDevicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::ListDevicesRequest* req,
             ::thingspect::api::ListDevicesResponse* resp) {
               return service->ListDevices(ctx, req, resp);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::CreateDevice(::grpc::ServerContext* context, const ::thingspect::api::CreateDeviceRequest* request, ::thingspect::api::Device* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::CreateDeviceLoRaWAN(::grpc::ServerContext* context, const ::thingspect::api::CreateDeviceLoRaWANRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetDevice(::grpc::ServerContext* context, const ::thingspect::api::GetDeviceRequest* request, ::thingspect::api::Device* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::UpdateDevice(::grpc::ServerContext* context, const ::thingspect::api::UpdateDeviceRequest* request, ::thingspect::api::Device* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::DeleteDeviceLoRaWAN(::grpc::ServerContext* context, const ::thingspect::api::DeleteDeviceLoRaWANRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::DeleteDevice(::grpc::ServerContext* context, const ::thingspect::api::DeleteDeviceRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::ListDevices(::grpc::ServerContext* context, const ::thingspect::api::ListDevicesRequest* request, ::thingspect::api::ListDevicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace thingspect
}  // namespace api


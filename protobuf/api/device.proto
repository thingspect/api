syntax = "proto3";
package api;

import "common/status.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/thingspect/api/go/api";

// DeviceService contains functions to query and modify devices.
service DeviceService {
  // Create a device.
  rpc CreateDevice(CreateDeviceRequest) returns (Device) {
    option (google.api.http) = {
      post: "/v1/devices"
      body: "device"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".api.Device"
            }
          }
        }
      }
    };
  }

  // Get a device by ID.
  rpc GetDevice(GetDeviceRequest) returns (Device) {
    option (google.api.http) = {
      get: "/v1/devices/{id}"
    };
  }

  // Update a device.
  rpc UpdateDevice(UpdateDeviceRequest) returns (Device) {
    option (google.api.http) = {
      put: "/v1/devices/{device.id}"
      body: "device"
      additional_bindings {
        patch: "/v1/devices/{device.id}"
        body: "device"
      }
    };
  }

  // Delete a device by ID.
  rpc DeleteDevice(DeleteDeviceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/devices/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // List all devices.
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {
    option (google.api.http) = {
      get: "/v1/devices"
    };
  }
}

// Device represents a device as stored in the database.
message Device {
  // Device ID (UUID).
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Organization ID (UUID).
  string org_id = 2 [json_name = "orgID", (google.api.field_behavior) = OUTPUT_ONLY];

  // Device unique ID.
  string uniq_id = 3 [json_name = "uniqID", (validate.rules).string = {min_len: 5, max_len: 40}, (google.api.field_behavior) = REQUIRED];

  // Device status.
  common.Status status = 4 [(validate.rules).enum = {in: [1,2]}, (google.api.field_behavior) = REQUIRED];

  // Authentication token (UUID).
  string token = 5;

  // Device creation timestamp.
  google.protobuf.Timestamp created_at = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Device modification timestamp.
  google.protobuf.Timestamp updated_at = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateDeviceRequest is sent to create a device.
message CreateDeviceRequest {
  // Device message to create.
  Device device = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// GetDeviceRequest is sent to get a device.
message GetDeviceRequest {
  // Device ID (UUID) to get.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// UpdateDeviceRequest is sent to update a device.
message UpdateDeviceRequest {
  // Device message to update.
  Device device = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteDeviceRequest is sent to delete a device.
message DeleteDeviceRequest {
  // Device ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListDevicesRequest is sent to list devices.
message ListDevicesRequest {
  // Number of devices to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32 = {gte:0, lte: 250}];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;
}

// ListDevicesResponse is sent in response to a device list.
message ListDevicesResponse {
  // Device array, ordered by ascending created_at timestamp.
  repeated Device devices = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Pagination token used to retrieve the previous page of results. Not returned for the first page.
  string prev_page_token = 3;

  // Total number of devices available.
  int32 total_size = 4;
}

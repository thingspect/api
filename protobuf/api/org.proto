syntax = "proto3";
package api;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/thingspect/api/go/api";

// OrgService contains functions to query and modify organizations.
service OrgService {
  // Create an organization.
  rpc CreateOrg(CreateOrgRequest) returns (Org) {
    option (google.api.http) = {
      post: "/v1/organizations"
      body: "org"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".api.Org"
            }
          }
        }
      }
    };
  }

  // Get an organization by ID.
  rpc GetOrg(GetOrgRequest) returns (Org) {
    option (google.api.http) = {
      get: "/v1/organizations/{id}"
    };
  }

  // Update an organization.
  rpc UpdateOrg(UpdateOrgRequest) returns (Org) {
    option (google.api.http) = {
      put: "/v1/organizations/{org.id}"
      body: "org"
      additional_bindings {
        patch: "/v1/organizations/{org.id}"
        body: "org"
      }
    };
  }

  // Delete an organization by ID.
  rpc DeleteOrg(DeleteOrgRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // List all orgs.
  rpc ListOrgs(ListOrgsRequest) returns (ListOrgsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations"
    };
  }
}

// Org represents an organization as stored in the database.
message Org {
  // Organization ID (UUID).
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Organization name.
  string name = 2 [(validate.rules).string = {min_len: 5, max_len: 40}, (google.api.field_behavior) = REQUIRED];

  // Organization creation timestamp.
  google.protobuf.Timestamp created_at = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Organization modification timestamp.
  google.protobuf.Timestamp updated_at = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateOrgRequest is sent to create an organization.
message CreateOrgRequest {
  // Org message to create.
  Org org = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// GetOrgRequest is sent to get an organization.
message GetOrgRequest {
  // Organization ID (UUID) to get.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// UpdateOrgRequest is sent to update an organization.
message UpdateOrgRequest {
  // Org message to update.
  Org org = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteOrgRequest is sent to delete an organization.
message DeleteOrgRequest {
  // Organization ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListOrgsRequest is sent to list organizations.
message ListOrgsRequest {
  // Number of organizations to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32 = {gte:0, lte: 250}];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;
}

// ListOrgsResponse is sent in response to an organization list.
message ListOrgsResponse {
  // Org array, ordered by ascending created_at timestamp.
  repeated Org orgs = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Pagination token used to retrieve the previous page of results. Not returned for the first page.
  string prev_page_token = 3;

  // Total number of orgs available.
  int32 total_size = 4;
}

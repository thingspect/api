// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/thingspect_alert.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2fthingspect_5falert_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_api_2fthingspect_5falert_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/api/annotations.pb.h"
#include "validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_api_2fthingspect_5falert_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2fthingspect_5falert_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_api_2fthingspect_5falert_2eproto;
namespace thingspect {
namespace api {
class Alert;
struct AlertDefaultTypeInternal;
extern AlertDefaultTypeInternal _Alert_default_instance_;
class ListAlertsRequest;
struct ListAlertsRequestDefaultTypeInternal;
extern ListAlertsRequestDefaultTypeInternal _ListAlertsRequest_default_instance_;
class ListAlertsResponse;
struct ListAlertsResponseDefaultTypeInternal;
extern ListAlertsResponseDefaultTypeInternal _ListAlertsResponse_default_instance_;
}  // namespace api
}  // namespace thingspect
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace thingspect {
namespace api {
enum AlertStatus : int {
  ALERT_STATUS_UNSPECIFIED = 0,
  SENT = 1,
  ERROR = 2,
  AlertStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AlertStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AlertStatus_IsValid(int value);
constexpr AlertStatus AlertStatus_MIN = static_cast<AlertStatus>(0);
constexpr AlertStatus AlertStatus_MAX = static_cast<AlertStatus>(2);
constexpr int AlertStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AlertStatus_descriptor();
template <typename T>
const std::string& AlertStatus_Name(T value) {
  static_assert(std::is_same<T, AlertStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AlertStatus_Name().");
  return AlertStatus_Name(static_cast<AlertStatus>(value));
}
template <>
inline const std::string& AlertStatus_Name(AlertStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AlertStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AlertStatus_Parse(absl::string_view name, AlertStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlertStatus>(
      AlertStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Alert final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thingspect.api.Alert) */ {
 public:
  inline Alert() : Alert(nullptr) {}
  ~Alert() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Alert(::google::protobuf::internal::ConstantInitialized);

  Alert(const Alert& from);
  Alert(Alert&& from) noexcept
    : Alert() {
    *this = ::std::move(from);
  }

  inline Alert& operator=(const Alert& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alert& operator=(Alert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Alert& default_instance() {
    return *internal_default_instance();
  }
  static inline const Alert* internal_default_instance() {
    return reinterpret_cast<const Alert*>(
               &_Alert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Alert& a, Alert& b) {
    a.Swap(&b);
  }
  inline void Swap(Alert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alert* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Alert* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Alert>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Alert& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Alert& from) {
    Alert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alert* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "thingspect.api.Alert";
  }
  protected:
  explicit Alert(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kUniqIdFieldNumber = 2,
    kAlarmIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kErrorFieldNumber = 6,
    kTraceIdFieldNumber = 8,
    kCreatedAtFieldNumber = 7,
    kStatusFieldNumber = 5,
  };
  // string org_id = 1 [json_name = "orgID"];
  void clear_org_id() ;
  const std::string& org_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_org_id(Arg_&& arg, Args_... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* ptr);

  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(
      const std::string& value);
  std::string* _internal_mutable_org_id();

  public:
  // string uniq_id = 2 [json_name = "uniqID"];
  void clear_uniq_id() ;
  const std::string& uniq_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uniq_id(Arg_&& arg, Args_... args);
  std::string* mutable_uniq_id();
  PROTOBUF_NODISCARD std::string* release_uniq_id();
  void set_allocated_uniq_id(std::string* ptr);

  private:
  const std::string& _internal_uniq_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uniq_id(
      const std::string& value);
  std::string* _internal_mutable_uniq_id();

  public:
  // string alarm_id = 3 [json_name = "alarmID"];
  void clear_alarm_id() ;
  const std::string& alarm_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alarm_id(Arg_&& arg, Args_... args);
  std::string* mutable_alarm_id();
  PROTOBUF_NODISCARD std::string* release_alarm_id();
  void set_allocated_alarm_id(std::string* ptr);

  private:
  const std::string& _internal_alarm_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alarm_id(
      const std::string& value);
  std::string* _internal_mutable_alarm_id();

  public:
  // string user_id = 4 [json_name = "userID"];
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string error = 6;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* ptr);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // string trace_id = 8;
  void clear_trace_id() ;
  const std::string& trace_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_id(Arg_&& arg, Args_... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* ptr);

  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(
      const std::string& value);
  std::string* _internal_mutable_trace_id();

  public:
  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // .thingspect.api.AlertStatus status = 5;
  void clear_status() ;
  ::thingspect::api::AlertStatus status() const;
  void set_status(::thingspect::api::AlertStatus value);

  private:
  ::thingspect::api::AlertStatus _internal_status() const;
  void _internal_set_status(::thingspect::api::AlertStatus value);

  public:
  // @@protoc_insertion_point(class_scope:thingspect.api.Alert)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 1, 78, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr org_id_;
    ::google::protobuf::internal::ArenaStringPtr uniq_id_;
    ::google::protobuf::internal::ArenaStringPtr alarm_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::ArenaStringPtr trace_id_;
    ::google::protobuf::Timestamp* created_at_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fthingspect_5falert_2eproto;
};// -------------------------------------------------------------------

class ListAlertsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thingspect.api.ListAlertsRequest) */ {
 public:
  inline ListAlertsRequest() : ListAlertsRequest(nullptr) {}
  ~ListAlertsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListAlertsRequest(::google::protobuf::internal::ConstantInitialized);

  ListAlertsRequest(const ListAlertsRequest& from);
  ListAlertsRequest(ListAlertsRequest&& from) noexcept
    : ListAlertsRequest() {
    *this = ::std::move(from);
  }

  inline ListAlertsRequest& operator=(const ListAlertsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAlertsRequest& operator=(ListAlertsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAlertsRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IdOneofCase {
    kUniqId = 1,
    kDeviceId = 2,
    ID_ONEOF_NOT_SET = 0,
  };

  static inline const ListAlertsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAlertsRequest*>(
               &_ListAlertsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListAlertsRequest& a, ListAlertsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAlertsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAlertsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAlertsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAlertsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListAlertsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListAlertsRequest& from) {
    ListAlertsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAlertsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "thingspect.api.ListAlertsRequest";
  }
  protected:
  explicit ListAlertsRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlarmIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kEndTimeFieldNumber = 5,
    kStartTimeFieldNumber = 6,
    kUniqIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // string alarm_id = 3 [json_name = "alarmID", (.validate.rules) = {
  void clear_alarm_id() ;
  const std::string& alarm_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alarm_id(Arg_&& arg, Args_... args);
  std::string* mutable_alarm_id();
  PROTOBUF_NODISCARD std::string* release_alarm_id();
  void set_allocated_alarm_id(std::string* ptr);

  private:
  const std::string& _internal_alarm_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alarm_id(
      const std::string& value);
  std::string* _internal_mutable_alarm_id();

  public:
  // string user_id = 4 [json_name = "userID", (.validate.rules) = {
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  void clear_end_time() ;
  const ::google::protobuf::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_end_time();

  public:
  // .google.protobuf.Timestamp start_time = 6;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_start_time();

  public:
  // string uniq_id = 1 [json_name = "uniqID"];
  bool has_uniq_id() const;
  void clear_uniq_id() ;
  const std::string& uniq_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uniq_id(Arg_&& arg, Args_... args);
  std::string* mutable_uniq_id();
  PROTOBUF_NODISCARD std::string* release_uniq_id();
  void set_allocated_uniq_id(std::string* ptr);

  private:
  const std::string& _internal_uniq_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uniq_id(
      const std::string& value);
  std::string* _internal_mutable_uniq_id();

  public:
  // string device_id = 2 [json_name = "deviceID", (.validate.rules) = {
  bool has_device_id() const;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* ptr);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  void clear_id_oneof();
  IdOneofCase id_oneof_case() const;
  // @@protoc_insertion_point(class_scope:thingspect.api.ListAlertsRequest)
 private:
  class _Internal;
  void set_has_uniq_id();
  void set_has_device_id();

  inline bool has_id_oneof() const;
  inline void clear_has_id_oneof();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 6, 2, 72, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr alarm_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::Timestamp* end_time_;
    ::google::protobuf::Timestamp* start_time_;
    union IdOneofUnion {
      constexpr IdOneofUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr uniq_id_;
      ::google::protobuf::internal::ArenaStringPtr device_id_;
    } id_oneof_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fthingspect_5falert_2eproto;
};// -------------------------------------------------------------------

class ListAlertsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thingspect.api.ListAlertsResponse) */ {
 public:
  inline ListAlertsResponse() : ListAlertsResponse(nullptr) {}
  ~ListAlertsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListAlertsResponse(::google::protobuf::internal::ConstantInitialized);

  ListAlertsResponse(const ListAlertsResponse& from);
  ListAlertsResponse(ListAlertsResponse&& from) noexcept
    : ListAlertsResponse() {
    *this = ::std::move(from);
  }

  inline ListAlertsResponse& operator=(const ListAlertsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAlertsResponse& operator=(ListAlertsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAlertsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAlertsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAlertsResponse*>(
               &_ListAlertsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListAlertsResponse& a, ListAlertsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAlertsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAlertsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAlertsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAlertsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListAlertsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListAlertsResponse& from) {
    ListAlertsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAlertsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "thingspect.api.ListAlertsResponse";
  }
  protected:
  explicit ListAlertsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlertsFieldNumber = 1,
  };
  // repeated .thingspect.api.Alert alerts = 1;
  int alerts_size() const;
  private:
  int _internal_alerts_size() const;

  public:
  void clear_alerts() ;
  ::thingspect::api::Alert* mutable_alerts(int index);
  ::google::protobuf::RepeatedPtrField< ::thingspect::api::Alert >*
      mutable_alerts();
  private:
  const ::google::protobuf::RepeatedPtrField<::thingspect::api::Alert>& _internal_alerts() const;
  ::google::protobuf::RepeatedPtrField<::thingspect::api::Alert>* _internal_mutable_alerts();
  public:
  const ::thingspect::api::Alert& alerts(int index) const;
  ::thingspect::api::Alert* add_alerts();
  const ::google::protobuf::RepeatedPtrField< ::thingspect::api::Alert >&
      alerts() const;
  // @@protoc_insertion_point(class_scope:thingspect.api.ListAlertsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::thingspect::api::Alert > alerts_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_api_2fthingspect_5falert_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Alert

// string org_id = 1 [json_name = "orgID"];
inline void Alert::clear_org_id() {
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& Alert::org_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.org_id)
  return _internal_org_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Alert::set_org_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.Alert.org_id)
}
inline std::string* Alert::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.Alert.org_id)
  return _s;
}
inline const std::string& Alert::_internal_org_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.org_id_.Get();
}
inline void Alert::_internal_set_org_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Alert::_internal_mutable_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.org_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Alert::release_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.Alert.org_id)
  return _impl_.org_id_.Release();
}
inline void Alert::set_allocated_org_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.org_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.org_id_.IsDefault()) {
          _impl_.org_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.Alert.org_id)
}

// string uniq_id = 2 [json_name = "uniqID"];
inline void Alert::clear_uniq_id() {
  _impl_.uniq_id_.ClearToEmpty();
}
inline const std::string& Alert::uniq_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.uniq_id)
  return _internal_uniq_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Alert::set_uniq_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uniq_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.Alert.uniq_id)
}
inline std::string* Alert::mutable_uniq_id() {
  std::string* _s = _internal_mutable_uniq_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.Alert.uniq_id)
  return _s;
}
inline const std::string& Alert::_internal_uniq_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uniq_id_.Get();
}
inline void Alert::_internal_set_uniq_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uniq_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Alert::_internal_mutable_uniq_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uniq_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Alert::release_uniq_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.Alert.uniq_id)
  return _impl_.uniq_id_.Release();
}
inline void Alert::set_allocated_uniq_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uniq_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uniq_id_.IsDefault()) {
          _impl_.uniq_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.Alert.uniq_id)
}

// string alarm_id = 3 [json_name = "alarmID"];
inline void Alert::clear_alarm_id() {
  _impl_.alarm_id_.ClearToEmpty();
}
inline const std::string& Alert::alarm_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.alarm_id)
  return _internal_alarm_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Alert::set_alarm_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alarm_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.Alert.alarm_id)
}
inline std::string* Alert::mutable_alarm_id() {
  std::string* _s = _internal_mutable_alarm_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.Alert.alarm_id)
  return _s;
}
inline const std::string& Alert::_internal_alarm_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alarm_id_.Get();
}
inline void Alert::_internal_set_alarm_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alarm_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Alert::_internal_mutable_alarm_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.alarm_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Alert::release_alarm_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.Alert.alarm_id)
  return _impl_.alarm_id_.Release();
}
inline void Alert::set_allocated_alarm_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alarm_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.alarm_id_.IsDefault()) {
          _impl_.alarm_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.Alert.alarm_id)
}

// string user_id = 4 [json_name = "userID"];
inline void Alert::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& Alert::user_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Alert::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.Alert.user_id)
}
inline std::string* Alert::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.Alert.user_id)
  return _s;
}
inline const std::string& Alert::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void Alert::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Alert::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Alert::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.Alert.user_id)
  return _impl_.user_id_.Release();
}
inline void Alert::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.Alert.user_id)
}

// .thingspect.api.AlertStatus status = 5;
inline void Alert::clear_status() {
  _impl_.status_ = 0;
}
inline ::thingspect::api::AlertStatus Alert::status() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.status)
  return _internal_status();
}
inline void Alert::set_status(::thingspect::api::AlertStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:thingspect.api.Alert.status)
}
inline ::thingspect::api::AlertStatus Alert::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::thingspect::api::AlertStatus>(_impl_.status_);
}
inline void Alert::_internal_set_status(::thingspect::api::AlertStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// string error = 6;
inline void Alert::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& Alert::error() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Alert::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.Alert.error)
}
inline std::string* Alert::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:thingspect.api.Alert.error)
  return _s;
}
inline const std::string& Alert::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void Alert::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Alert::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArenaForAllocation());
}
inline std::string* Alert::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.Alert.error)
  return _impl_.error_.Release();
}
inline void Alert::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.Alert.error)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool Alert::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Alert::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Alert::created_at() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.created_at)
  return _internal_created_at();
}
inline void Alert::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:thingspect.api.Alert.created_at)
}
inline ::google::protobuf::Timestamp* Alert::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Alert::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.Alert.created_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Alert::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* Alert::mutable_created_at() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:thingspect.api.Alert.created_at)
  return _msg;
}
inline void Alert::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.Alert.created_at)
}

// string trace_id = 8;
inline void Alert::clear_trace_id() {
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& Alert::trace_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.Alert.trace_id)
  return _internal_trace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Alert::set_trace_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trace_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.Alert.trace_id)
}
inline std::string* Alert::mutable_trace_id() {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.Alert.trace_id)
  return _s;
}
inline const std::string& Alert::_internal_trace_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trace_id_.Get();
}
inline void Alert::_internal_set_trace_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trace_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Alert::_internal_mutable_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trace_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Alert::release_trace_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.Alert.trace_id)
  return _impl_.trace_id_.Release();
}
inline void Alert::set_allocated_trace_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trace_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_id_.IsDefault()) {
          _impl_.trace_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.Alert.trace_id)
}

// -------------------------------------------------------------------

// ListAlertsRequest

// string uniq_id = 1 [json_name = "uniqID"];
inline bool ListAlertsRequest::has_uniq_id() const {
  return id_oneof_case() == kUniqId;
}
inline void ListAlertsRequest::set_has_uniq_id() {
  _impl_._oneof_case_[0] = kUniqId;
}
inline void ListAlertsRequest::clear_uniq_id() {
  if (id_oneof_case() == kUniqId) {
    _impl_.id_oneof_.uniq_id_.Destroy();
    clear_has_id_oneof();
  }
}
inline const std::string& ListAlertsRequest::uniq_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.ListAlertsRequest.uniq_id)
  return _internal_uniq_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListAlertsRequest::set_uniq_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kUniqId) {
    clear_id_oneof();

    set_has_uniq_id();
    _impl_.id_oneof_.uniq_id_.InitDefault();
  }
  _impl_.id_oneof_.uniq_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.ListAlertsRequest.uniq_id)
}
inline std::string* ListAlertsRequest::mutable_uniq_id() {
  std::string* _s = _internal_mutable_uniq_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.ListAlertsRequest.uniq_id)
  return _s;
}
inline const std::string& ListAlertsRequest::_internal_uniq_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kUniqId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.id_oneof_.uniq_id_.Get();
}
inline void ListAlertsRequest::_internal_set_uniq_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kUniqId) {
    clear_id_oneof();

    set_has_uniq_id();
    _impl_.id_oneof_.uniq_id_.InitDefault();
  }
  _impl_.id_oneof_.uniq_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::_internal_mutable_uniq_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kUniqId) {
    clear_id_oneof();

    set_has_uniq_id();
    _impl_.id_oneof_.uniq_id_.InitDefault();
  }
  return _impl_.id_oneof_.uniq_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::release_uniq_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.ListAlertsRequest.uniq_id)
  if (id_oneof_case() != kUniqId) {
    return nullptr;
  }
  clear_has_id_oneof();
  return _impl_.id_oneof_.uniq_id_.Release();
}
inline void ListAlertsRequest::set_allocated_uniq_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_id_oneof()) {
    clear_id_oneof();
  }
  if (value != nullptr) {
    set_has_uniq_id();
    _impl_.id_oneof_.uniq_id_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.ListAlertsRequest.uniq_id)
}

// string device_id = 2 [json_name = "deviceID", (.validate.rules) = {
inline bool ListAlertsRequest::has_device_id() const {
  return id_oneof_case() == kDeviceId;
}
inline void ListAlertsRequest::set_has_device_id() {
  _impl_._oneof_case_[0] = kDeviceId;
}
inline void ListAlertsRequest::clear_device_id() {
  if (id_oneof_case() == kDeviceId) {
    _impl_.id_oneof_.device_id_.Destroy();
    clear_has_id_oneof();
  }
}
inline const std::string& ListAlertsRequest::device_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.ListAlertsRequest.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListAlertsRequest::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kDeviceId) {
    clear_id_oneof();

    set_has_device_id();
    _impl_.id_oneof_.device_id_.InitDefault();
  }
  _impl_.id_oneof_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.ListAlertsRequest.device_id)
}
inline std::string* ListAlertsRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.ListAlertsRequest.device_id)
  return _s;
}
inline const std::string& ListAlertsRequest::_internal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kDeviceId) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.id_oneof_.device_id_.Get();
}
inline void ListAlertsRequest::_internal_set_device_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kDeviceId) {
    clear_id_oneof();

    set_has_device_id();
    _impl_.id_oneof_.device_id_.InitDefault();
  }
  _impl_.id_oneof_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::_internal_mutable_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (id_oneof_case() != kDeviceId) {
    clear_id_oneof();

    set_has_device_id();
    _impl_.id_oneof_.device_id_.InitDefault();
  }
  return _impl_.id_oneof_.device_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::release_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.ListAlertsRequest.device_id)
  if (id_oneof_case() != kDeviceId) {
    return nullptr;
  }
  clear_has_id_oneof();
  return _impl_.id_oneof_.device_id_.Release();
}
inline void ListAlertsRequest::set_allocated_device_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_id_oneof()) {
    clear_id_oneof();
  }
  if (value != nullptr) {
    set_has_device_id();
    _impl_.id_oneof_.device_id_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.ListAlertsRequest.device_id)
}

// string alarm_id = 3 [json_name = "alarmID", (.validate.rules) = {
inline void ListAlertsRequest::clear_alarm_id() {
  _impl_.alarm_id_.ClearToEmpty();
}
inline const std::string& ListAlertsRequest::alarm_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.ListAlertsRequest.alarm_id)
  return _internal_alarm_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListAlertsRequest::set_alarm_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alarm_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.ListAlertsRequest.alarm_id)
}
inline std::string* ListAlertsRequest::mutable_alarm_id() {
  std::string* _s = _internal_mutable_alarm_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.ListAlertsRequest.alarm_id)
  return _s;
}
inline const std::string& ListAlertsRequest::_internal_alarm_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alarm_id_.Get();
}
inline void ListAlertsRequest::_internal_set_alarm_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.alarm_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::_internal_mutable_alarm_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.alarm_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::release_alarm_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.ListAlertsRequest.alarm_id)
  return _impl_.alarm_id_.Release();
}
inline void ListAlertsRequest::set_allocated_alarm_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alarm_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.alarm_id_.IsDefault()) {
          _impl_.alarm_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.ListAlertsRequest.alarm_id)
}

// string user_id = 4 [json_name = "userID", (.validate.rules) = {
inline void ListAlertsRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ListAlertsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:thingspect.api.ListAlertsRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListAlertsRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:thingspect.api.ListAlertsRequest.user_id)
}
inline std::string* ListAlertsRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:thingspect.api.ListAlertsRequest.user_id)
  return _s;
}
inline const std::string& ListAlertsRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void ListAlertsRequest::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ListAlertsRequest::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.ListAlertsRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ListAlertsRequest::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.ListAlertsRequest.user_id)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool ListAlertsRequest::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ListAlertsRequest::_internal_end_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ListAlertsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:thingspect.api.ListAlertsRequest.end_time)
  return _internal_end_time();
}
inline void ListAlertsRequest::unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:thingspect.api.ListAlertsRequest.end_time)
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::release_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::unsafe_arena_release_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.ListAlertsRequest.end_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::_internal_mutable_end_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_time_;
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::mutable_end_time() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:thingspect.api.ListAlertsRequest.end_time)
  return _msg;
}
inline void ListAlertsRequest::set_allocated_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.ListAlertsRequest.end_time)
}

// .google.protobuf.Timestamp start_time = 6;
inline bool ListAlertsRequest::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ListAlertsRequest::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ListAlertsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:thingspect.api.ListAlertsRequest.start_time)
  return _internal_start_time();
}
inline void ListAlertsRequest::unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:thingspect.api.ListAlertsRequest.start_time)
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::unsafe_arena_release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:thingspect.api.ListAlertsRequest.start_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::_internal_mutable_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* ListAlertsRequest::mutable_start_time() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:thingspect.api.ListAlertsRequest.start_time)
  return _msg;
}
inline void ListAlertsRequest::set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:thingspect.api.ListAlertsRequest.start_time)
}

inline bool ListAlertsRequest::has_id_oneof() const {
  return id_oneof_case() != ID_ONEOF_NOT_SET;
}
inline void ListAlertsRequest::clear_has_id_oneof() {
  _impl_._oneof_case_[0] = ID_ONEOF_NOT_SET;
}
inline ListAlertsRequest::IdOneofCase ListAlertsRequest::id_oneof_case() const {
  return ListAlertsRequest::IdOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListAlertsResponse

// repeated .thingspect.api.Alert alerts = 1;
inline int ListAlertsResponse::_internal_alerts_size() const {
  return _internal_alerts().size();
}
inline int ListAlertsResponse::alerts_size() const {
  return _internal_alerts_size();
}
inline void ListAlertsResponse::clear_alerts() {
  _internal_mutable_alerts()->Clear();
}
inline ::thingspect::api::Alert* ListAlertsResponse::mutable_alerts(int index) {
  // @@protoc_insertion_point(field_mutable:thingspect.api.ListAlertsResponse.alerts)
  return _internal_mutable_alerts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::thingspect::api::Alert >*
ListAlertsResponse::mutable_alerts() {
  // @@protoc_insertion_point(field_mutable_list:thingspect.api.ListAlertsResponse.alerts)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_alerts();
}
inline const ::thingspect::api::Alert& ListAlertsResponse::alerts(int index) const {
  // @@protoc_insertion_point(field_get:thingspect.api.ListAlertsResponse.alerts)
    return _internal_alerts().Get(index);
}
inline ::thingspect::api::Alert* ListAlertsResponse::add_alerts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::thingspect::api::Alert* _add = _internal_mutable_alerts()->Add();
  // @@protoc_insertion_point(field_add:thingspect.api.ListAlertsResponse.alerts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::thingspect::api::Alert >&
ListAlertsResponse::alerts() const {
  // @@protoc_insertion_point(field_list:thingspect.api.ListAlertsResponse.alerts)
  return _internal_alerts();
}
inline const ::google::protobuf::RepeatedPtrField<::thingspect::api::Alert>&
ListAlertsResponse::_internal_alerts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alerts_;
}
inline ::google::protobuf::RepeatedPtrField<::thingspect::api::Alert>*
ListAlertsResponse::_internal_mutable_alerts() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.alerts_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace thingspect


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::thingspect::api::AlertStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::thingspect::api::AlertStatus>() {
  return ::thingspect::api::AlertStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_api_2fthingspect_5falert_2eproto_2epb_2eh

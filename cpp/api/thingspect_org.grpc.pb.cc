// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/thingspect_org.proto

#include "api/thingspect_org.pb.h"
#include "api/thingspect_org.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace thingspect {
namespace api {

static const char* OrgService_method_names[] = {
  "/thingspect.api.OrgService/CreateOrg",
  "/thingspect.api.OrgService/GetOrg",
  "/thingspect.api.OrgService/UpdateOrg",
  "/thingspect.api.OrgService/DeleteOrg",
  "/thingspect.api.OrgService/ListOrgs",
};

std::unique_ptr< OrgService::Stub> OrgService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrgService::Stub> stub(new OrgService::Stub(channel, options));
  return stub;
}

OrgService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateOrg_(OrgService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrg_(OrgService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrg_(OrgService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOrg_(OrgService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrgs_(OrgService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrgService::Stub::CreateOrg(::grpc::ClientContext* context, const ::thingspect::api::CreateOrgRequest& request, ::thingspect::api::Org* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::CreateOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateOrg_, context, request, response);
}

void OrgService::Stub::async::CreateOrg(::grpc::ClientContext* context, const ::thingspect::api::CreateOrgRequest* request, ::thingspect::api::Org* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::CreateOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrg_, context, request, response, std::move(f));
}

void OrgService::Stub::async::CreateOrg(::grpc::ClientContext* context, const ::thingspect::api::CreateOrgRequest* request, ::thingspect::api::Org* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateOrg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Org>* OrgService::Stub::PrepareAsyncCreateOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateOrgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Org, ::thingspect::api::CreateOrgRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateOrg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Org>* OrgService::Stub::AsyncCreateOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateOrgRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateOrgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::GetOrg(::grpc::ClientContext* context, const ::thingspect::api::GetOrgRequest& request, ::thingspect::api::Org* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::GetOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrg_, context, request, response);
}

void OrgService::Stub::async::GetOrg(::grpc::ClientContext* context, const ::thingspect::api::GetOrgRequest* request, ::thingspect::api::Org* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::GetOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrg_, context, request, response, std::move(f));
}

void OrgService::Stub::async::GetOrg(::grpc::ClientContext* context, const ::thingspect::api::GetOrgRequest* request, ::thingspect::api::Org* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Org>* OrgService::Stub::PrepareAsyncGetOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Org, ::thingspect::api::GetOrgRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Org>* OrgService::Stub::AsyncGetOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::UpdateOrg(::grpc::ClientContext* context, const ::thingspect::api::UpdateOrgRequest& request, ::thingspect::api::Org* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::UpdateOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrg_, context, request, response);
}

void OrgService::Stub::async::UpdateOrg(::grpc::ClientContext* context, const ::thingspect::api::UpdateOrgRequest* request, ::thingspect::api::Org* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::UpdateOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrg_, context, request, response, std::move(f));
}

void OrgService::Stub::async::UpdateOrg(::grpc::ClientContext* context, const ::thingspect::api::UpdateOrgRequest* request, ::thingspect::api::Org* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Org>* OrgService::Stub::PrepareAsyncUpdateOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateOrgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Org, ::thingspect::api::UpdateOrgRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Org>* OrgService::Stub::AsyncUpdateOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateOrgRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::DeleteOrg(::grpc::ClientContext* context, const ::thingspect::api::DeleteOrgRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::DeleteOrgRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteOrg_, context, request, response);
}

void OrgService::Stub::async::DeleteOrg(::grpc::ClientContext* context, const ::thingspect::api::DeleteOrgRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::DeleteOrgRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteOrg_, context, request, response, std::move(f));
}

void OrgService::Stub::async::DeleteOrg(::grpc::ClientContext* context, const ::thingspect::api::DeleteOrgRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteOrg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* OrgService::Stub::PrepareAsyncDeleteOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteOrgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::thingspect::api::DeleteOrgRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteOrg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* OrgService::Stub::AsyncDeleteOrgRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteOrgRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteOrgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::ListOrgs(::grpc::ClientContext* context, const ::thingspect::api::ListOrgsRequest& request, ::thingspect::api::ListOrgsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::ListOrgsRequest, ::thingspect::api::ListOrgsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListOrgs_, context, request, response);
}

void OrgService::Stub::async::ListOrgs(::grpc::ClientContext* context, const ::thingspect::api::ListOrgsRequest* request, ::thingspect::api::ListOrgsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::ListOrgsRequest, ::thingspect::api::ListOrgsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrgs_, context, request, response, std::move(f));
}

void OrgService::Stub::async::ListOrgs(::grpc::ClientContext* context, const ::thingspect::api::ListOrgsRequest* request, ::thingspect::api::ListOrgsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOrgs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListOrgsResponse>* OrgService::Stub::PrepareAsyncListOrgsRaw(::grpc::ClientContext* context, const ::thingspect::api::ListOrgsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::ListOrgsResponse, ::thingspect::api::ListOrgsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListOrgs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListOrgsResponse>* OrgService::Stub::AsyncListOrgsRaw(::grpc::ClientContext* context, const ::thingspect::api::ListOrgsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListOrgsRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrgService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::thingspect::api::CreateOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::CreateOrgRequest* req,
             ::thingspect::api::Org* resp) {
               return service->CreateOrg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::thingspect::api::GetOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::GetOrgRequest* req,
             ::thingspect::api::Org* resp) {
               return service->GetOrg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::thingspect::api::UpdateOrgRequest, ::thingspect::api::Org, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::UpdateOrgRequest* req,
             ::thingspect::api::Org* resp) {
               return service->UpdateOrg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::thingspect::api::DeleteOrgRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::DeleteOrgRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteOrg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::thingspect::api::ListOrgsRequest, ::thingspect::api::ListOrgsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::ListOrgsRequest* req,
             ::thingspect::api::ListOrgsResponse* resp) {
               return service->ListOrgs(ctx, req, resp);
             }, this)));
}

OrgService::Service::~Service() {
}

::grpc::Status OrgService::Service::CreateOrg(::grpc::ServerContext* context, const ::thingspect::api::CreateOrgRequest* request, ::thingspect::api::Org* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::GetOrg(::grpc::ServerContext* context, const ::thingspect::api::GetOrgRequest* request, ::thingspect::api::Org* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::UpdateOrg(::grpc::ServerContext* context, const ::thingspect::api::UpdateOrgRequest* request, ::thingspect::api::Org* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::DeleteOrg(::grpc::ServerContext* context, const ::thingspect::api::DeleteOrgRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::ListOrgs(::grpc::ServerContext* context, const ::thingspect::api::ListOrgsRequest* request, ::thingspect::api::ListOrgsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace thingspect
}  // namespace api


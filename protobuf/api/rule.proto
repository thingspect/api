syntax = "proto3";
package thingspect.api;

import "common/status.proto";
import "common/datapoint.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/thingspect/api/go/api";

// RuleService contains functions to query and modify rules.
service RuleService {
  // Create a rule. Rules define how events are generated.
  rpc CreateRule(CreateRuleRequest) returns (Rule) {
    option (google.api.http) = {
      post: "/v1/rules"
      body: "rule"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "A successful response."
          schema: {
            json_schema: {
              ref: ".thingspect.api.Rule"
            }
          }
        }
      }
    };
  }

  // Get a rule by ID. Rules define how events are generated.
  rpc GetRule(GetRuleRequest) returns (Rule) {
    option (google.api.http) = {
      get: "/v1/rules/{id}"
    };
  }

  // Update a rule. Rules define how events are generated.
  rpc UpdateRule(UpdateRuleRequest) returns (Rule) {
    option (google.api.http) = {
      put: "/v1/rules/{rule.id}"
      body: "rule"
      additional_bindings {
        patch: "/v1/rules/{rule.id}"
        body: "rule"
      }
    };
  }

  // Delete a rule by ID. Rules define how events are generated.
  rpc DeleteRule(DeleteRuleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/rules/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "204"
        value: {
          description: "A successful response."
          schema: {}
        }
      }
    };
  }

  // List all rules. Rules define how events are generated.
  rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
    option (google.api.http) = {
      get: "/v1/rules"
    };
  }

  // Test a rule. Rules define how events are generated.
  rpc TestRule(TestRuleRequest) returns (TestRuleResponse) {
    option (google.api.http) = {
      post: "/v1/rules/test"
      body: "*"
    };
  }
}

// Rule represents a rule as stored in the database.
message Rule {
  // Rule ID (UUID).
  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Organization ID (UUID).
  string org_id = 2 [json_name = "orgID", (google.api.field_behavior) = OUTPUT_ONLY];

  // Rule name.
  string name = 3 [(validate.rules).string = {min_len: 5, max_len: 80}, (google.api.field_behavior) = REQUIRED];

  // Rule status.
  common.Status status = 4 [(validate.rules).enum = {in: [3,6]}, (google.api.field_behavior) = REQUIRED];

  // Device tag that the rule applies to.
  string tag = 5 [(validate.rules).string.max_len = 255, (google.api.field_behavior) = REQUIRED];

  // Device attribute that the rule applies to.
  string attr = 6 [(validate.rules).string.max_len = 40, (google.api.field_behavior) = REQUIRED];

  // Rule expression. The rules engine evaluates a boolean expression using the [Expr language](https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md).
  string expr = 7 [(validate.rules).string.max_len = 1024, (google.api.field_behavior) = REQUIRED];

  // Rule creation timestamp.
  google.protobuf.Timestamp created_at = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Rule modification timestamp.
  google.protobuf.Timestamp updated_at = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateRuleRequest is sent to create a rule.
message CreateRuleRequest {
  // Rule message to create.
  Rule rule = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// GetRuleRequest is sent to get a rule.
message GetRuleRequest {
  // Rule ID (UUID) to get.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// UpdateRuleRequest is sent to update a rule.
message UpdateRuleRequest {
  // Rule message to update.
  Rule rule = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.
  google.protobuf.FieldMask update_mask = 2;
}

// DeleteRuleRequest is sent to delete a rule.
message DeleteRuleRequest {
  // Rule ID (UUID) to delete.
  string id = 1 [(validate.rules).string.uuid = true, (google.api.field_behavior) = REQUIRED];
}

// ListRulesRequest is sent to list rules.
message ListRulesRequest {
  // Number of rules to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.
  int32 page_size = 1 [(validate.rules).int32 = {gte:0, lte: 250}];

  // Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.
  string page_token = 2;
}

// ListRulesResponse is sent in response to a rule list.
message ListRulesResponse {
  // Rule array, ordered by ascending created_at timestamp.
  repeated Rule rules = 1;

  // Pagination token used to retrieve the next page of results. Not returned for the last page.
  string next_page_token = 2;

  // Total number of rules available.
  int32 total_size = 3;
}

// TestRuleRequest is sent to test a rule.
message TestRuleRequest {
  // Data point to test against a rule.
  common.DataPoint point = 1 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];

  // Rule message to test.
  Rule rule = 2 [(validate.rules).message.required = true, (google.api.field_behavior) = REQUIRED];
}

// TestRuleResponse is sent in response to a rule test.
message TestRuleResponse {
  // Result of the rule evaluation.
  bool result = 1;
}

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/thingspect_rule_alarm.proto

#include "api/thingspect_rule_alarm.pb.h"
#include "api/thingspect_rule_alarm.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace thingspect {
namespace api {

static const char* RuleAlarmService_method_names[] = {
  "/thingspect.api.RuleAlarmService/CreateRule",
  "/thingspect.api.RuleAlarmService/CreateAlarm",
  "/thingspect.api.RuleAlarmService/GetRule",
  "/thingspect.api.RuleAlarmService/GetAlarm",
  "/thingspect.api.RuleAlarmService/UpdateRule",
  "/thingspect.api.RuleAlarmService/UpdateAlarm",
  "/thingspect.api.RuleAlarmService/DeleteRule",
  "/thingspect.api.RuleAlarmService/DeleteAlarm",
  "/thingspect.api.RuleAlarmService/ListRules",
  "/thingspect.api.RuleAlarmService/ListAlarms",
  "/thingspect.api.RuleAlarmService/TestRule",
  "/thingspect.api.RuleAlarmService/TestAlarm",
};

std::unique_ptr< RuleAlarmService::Stub> RuleAlarmService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RuleAlarmService::Stub> stub(new RuleAlarmService::Stub(channel, options));
  return stub;
}

RuleAlarmService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateRule_(RuleAlarmService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAlarm_(RuleAlarmService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRule_(RuleAlarmService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAlarm_(RuleAlarmService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRule_(RuleAlarmService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAlarm_(RuleAlarmService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRule_(RuleAlarmService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAlarm_(RuleAlarmService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRules_(RuleAlarmService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAlarms_(RuleAlarmService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestRule_(RuleAlarmService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestAlarm_(RuleAlarmService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RuleAlarmService::Stub::CreateRule(::grpc::ClientContext* context, const ::thingspect::api::CreateRuleRequest& request, ::thingspect::api::Rule* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::CreateRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRule_, context, request, response);
}

void RuleAlarmService::Stub::async::CreateRule(::grpc::ClientContext* context, const ::thingspect::api::CreateRuleRequest* request, ::thingspect::api::Rule* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::CreateRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRule_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::CreateRule(::grpc::ClientContext* context, const ::thingspect::api::CreateRuleRequest* request, ::thingspect::api::Rule* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Rule>* RuleAlarmService::Stub::PrepareAsyncCreateRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateRuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Rule, ::thingspect::api::CreateRuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Rule>* RuleAlarmService::Stub::AsyncCreateRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateRuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::CreateAlarm(::grpc::ClientContext* context, const ::thingspect::api::CreateAlarmRequest& request, ::thingspect::api::Alarm* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::CreateAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAlarm_, context, request, response);
}

void RuleAlarmService::Stub::async::CreateAlarm(::grpc::ClientContext* context, const ::thingspect::api::CreateAlarmRequest* request, ::thingspect::api::Alarm* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::CreateAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAlarm_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::CreateAlarm(::grpc::ClientContext* context, const ::thingspect::api::CreateAlarmRequest* request, ::thingspect::api::Alarm* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Alarm>* RuleAlarmService::Stub::PrepareAsyncCreateAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Alarm, ::thingspect::api::CreateAlarmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAlarm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Alarm>* RuleAlarmService::Stub::AsyncCreateAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::CreateAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAlarmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::GetRule(::grpc::ClientContext* context, const ::thingspect::api::GetRuleRequest& request, ::thingspect::api::Rule* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::GetRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRule_, context, request, response);
}

void RuleAlarmService::Stub::async::GetRule(::grpc::ClientContext* context, const ::thingspect::api::GetRuleRequest* request, ::thingspect::api::Rule* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::GetRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRule_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::GetRule(::grpc::ClientContext* context, const ::thingspect::api::GetRuleRequest* request, ::thingspect::api::Rule* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Rule>* RuleAlarmService::Stub::PrepareAsyncGetRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::GetRuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Rule, ::thingspect::api::GetRuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Rule>* RuleAlarmService::Stub::AsyncGetRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::GetRuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::GetAlarm(::grpc::ClientContext* context, const ::thingspect::api::GetAlarmRequest& request, ::thingspect::api::Alarm* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::GetAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAlarm_, context, request, response);
}

void RuleAlarmService::Stub::async::GetAlarm(::grpc::ClientContext* context, const ::thingspect::api::GetAlarmRequest* request, ::thingspect::api::Alarm* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::GetAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAlarm_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::GetAlarm(::grpc::ClientContext* context, const ::thingspect::api::GetAlarmRequest* request, ::thingspect::api::Alarm* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Alarm>* RuleAlarmService::Stub::PrepareAsyncGetAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::GetAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Alarm, ::thingspect::api::GetAlarmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAlarm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Alarm>* RuleAlarmService::Stub::AsyncGetAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::GetAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAlarmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::UpdateRule(::grpc::ClientContext* context, const ::thingspect::api::UpdateRuleRequest& request, ::thingspect::api::Rule* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::UpdateRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRule_, context, request, response);
}

void RuleAlarmService::Stub::async::UpdateRule(::grpc::ClientContext* context, const ::thingspect::api::UpdateRuleRequest* request, ::thingspect::api::Rule* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::UpdateRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRule_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::UpdateRule(::grpc::ClientContext* context, const ::thingspect::api::UpdateRuleRequest* request, ::thingspect::api::Rule* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Rule>* RuleAlarmService::Stub::PrepareAsyncUpdateRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateRuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Rule, ::thingspect::api::UpdateRuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Rule>* RuleAlarmService::Stub::AsyncUpdateRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateRuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::UpdateAlarm(::grpc::ClientContext* context, const ::thingspect::api::UpdateAlarmRequest& request, ::thingspect::api::Alarm* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::UpdateAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateAlarm_, context, request, response);
}

void RuleAlarmService::Stub::async::UpdateAlarm(::grpc::ClientContext* context, const ::thingspect::api::UpdateAlarmRequest* request, ::thingspect::api::Alarm* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::UpdateAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAlarm_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::UpdateAlarm(::grpc::ClientContext* context, const ::thingspect::api::UpdateAlarmRequest* request, ::thingspect::api::Alarm* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Alarm>* RuleAlarmService::Stub::PrepareAsyncUpdateAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::Alarm, ::thingspect::api::UpdateAlarmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateAlarm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::Alarm>* RuleAlarmService::Stub::AsyncUpdateAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::UpdateAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateAlarmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::DeleteRule(::grpc::ClientContext* context, const ::thingspect::api::DeleteRuleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::DeleteRuleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRule_, context, request, response);
}

void RuleAlarmService::Stub::async::DeleteRule(::grpc::ClientContext* context, const ::thingspect::api::DeleteRuleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::DeleteRuleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRule_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::DeleteRule(::grpc::ClientContext* context, const ::thingspect::api::DeleteRuleRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RuleAlarmService::Stub::PrepareAsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::thingspect::api::DeleteRuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RuleAlarmService::Stub::AsyncDeleteRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteRuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::DeleteAlarm(::grpc::ClientContext* context, const ::thingspect::api::DeleteAlarmRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::DeleteAlarmRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteAlarm_, context, request, response);
}

void RuleAlarmService::Stub::async::DeleteAlarm(::grpc::ClientContext* context, const ::thingspect::api::DeleteAlarmRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::DeleteAlarmRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAlarm_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::DeleteAlarm(::grpc::ClientContext* context, const ::thingspect::api::DeleteAlarmRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RuleAlarmService::Stub::PrepareAsyncDeleteAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::thingspect::api::DeleteAlarmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteAlarm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RuleAlarmService::Stub::AsyncDeleteAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::DeleteAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteAlarmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::ListRules(::grpc::ClientContext* context, const ::thingspect::api::ListRulesRequest& request, ::thingspect::api::ListRulesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::ListRulesRequest, ::thingspect::api::ListRulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListRules_, context, request, response);
}

void RuleAlarmService::Stub::async::ListRules(::grpc::ClientContext* context, const ::thingspect::api::ListRulesRequest* request, ::thingspect::api::ListRulesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::ListRulesRequest, ::thingspect::api::ListRulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRules_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::ListRules(::grpc::ClientContext* context, const ::thingspect::api::ListRulesRequest* request, ::thingspect::api::ListRulesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListRules_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListRulesResponse>* RuleAlarmService::Stub::PrepareAsyncListRulesRaw(::grpc::ClientContext* context, const ::thingspect::api::ListRulesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::ListRulesResponse, ::thingspect::api::ListRulesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListRules_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListRulesResponse>* RuleAlarmService::Stub::AsyncListRulesRaw(::grpc::ClientContext* context, const ::thingspect::api::ListRulesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRulesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::ListAlarms(::grpc::ClientContext* context, const ::thingspect::api::ListAlarmsRequest& request, ::thingspect::api::ListAlarmsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::ListAlarmsRequest, ::thingspect::api::ListAlarmsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListAlarms_, context, request, response);
}

void RuleAlarmService::Stub::async::ListAlarms(::grpc::ClientContext* context, const ::thingspect::api::ListAlarmsRequest* request, ::thingspect::api::ListAlarmsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::ListAlarmsRequest, ::thingspect::api::ListAlarmsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAlarms_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::ListAlarms(::grpc::ClientContext* context, const ::thingspect::api::ListAlarmsRequest* request, ::thingspect::api::ListAlarmsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListAlarms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListAlarmsResponse>* RuleAlarmService::Stub::PrepareAsyncListAlarmsRaw(::grpc::ClientContext* context, const ::thingspect::api::ListAlarmsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::ListAlarmsResponse, ::thingspect::api::ListAlarmsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListAlarms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListAlarmsResponse>* RuleAlarmService::Stub::AsyncListAlarmsRaw(::grpc::ClientContext* context, const ::thingspect::api::ListAlarmsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAlarmsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::TestRule(::grpc::ClientContext* context, const ::thingspect::api::TestRuleRequest& request, ::thingspect::api::TestRuleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::TestRuleRequest, ::thingspect::api::TestRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestRule_, context, request, response);
}

void RuleAlarmService::Stub::async::TestRule(::grpc::ClientContext* context, const ::thingspect::api::TestRuleRequest* request, ::thingspect::api::TestRuleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::TestRuleRequest, ::thingspect::api::TestRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestRule_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::TestRule(::grpc::ClientContext* context, const ::thingspect::api::TestRuleRequest* request, ::thingspect::api::TestRuleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestRule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::TestRuleResponse>* RuleAlarmService::Stub::PrepareAsyncTestRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::TestRuleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::TestRuleResponse, ::thingspect::api::TestRuleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestRule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::TestRuleResponse>* RuleAlarmService::Stub::AsyncTestRuleRaw(::grpc::ClientContext* context, const ::thingspect::api::TestRuleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestRuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuleAlarmService::Stub::TestAlarm(::grpc::ClientContext* context, const ::thingspect::api::TestAlarmRequest& request, ::thingspect::api::TestAlarmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::TestAlarmRequest, ::thingspect::api::TestAlarmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestAlarm_, context, request, response);
}

void RuleAlarmService::Stub::async::TestAlarm(::grpc::ClientContext* context, const ::thingspect::api::TestAlarmRequest* request, ::thingspect::api::TestAlarmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::TestAlarmRequest, ::thingspect::api::TestAlarmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestAlarm_, context, request, response, std::move(f));
}

void RuleAlarmService::Stub::async::TestAlarm(::grpc::ClientContext* context, const ::thingspect::api::TestAlarmRequest* request, ::thingspect::api::TestAlarmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestAlarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::TestAlarmResponse>* RuleAlarmService::Stub::PrepareAsyncTestAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::TestAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::TestAlarmResponse, ::thingspect::api::TestAlarmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestAlarm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::TestAlarmResponse>* RuleAlarmService::Stub::AsyncTestAlarmRaw(::grpc::ClientContext* context, const ::thingspect::api::TestAlarmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestAlarmRaw(context, request, cq);
  result->StartCall();
  return result;
}

RuleAlarmService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::CreateRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::CreateRuleRequest* req,
             ::thingspect::api::Rule* resp) {
               return service->CreateRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::CreateAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::CreateAlarmRequest* req,
             ::thingspect::api::Alarm* resp) {
               return service->CreateAlarm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::GetRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::GetRuleRequest* req,
             ::thingspect::api::Rule* resp) {
               return service->GetRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::GetAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::GetAlarmRequest* req,
             ::thingspect::api::Alarm* resp) {
               return service->GetAlarm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::UpdateRuleRequest, ::thingspect::api::Rule, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::UpdateRuleRequest* req,
             ::thingspect::api::Rule* resp) {
               return service->UpdateRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::UpdateAlarmRequest, ::thingspect::api::Alarm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::UpdateAlarmRequest* req,
             ::thingspect::api::Alarm* resp) {
               return service->UpdateAlarm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::DeleteRuleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::DeleteRuleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::DeleteAlarmRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::DeleteAlarmRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteAlarm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::ListRulesRequest, ::thingspect::api::ListRulesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::ListRulesRequest* req,
             ::thingspect::api::ListRulesResponse* resp) {
               return service->ListRules(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::ListAlarmsRequest, ::thingspect::api::ListAlarmsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::ListAlarmsRequest* req,
             ::thingspect::api::ListAlarmsResponse* resp) {
               return service->ListAlarms(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::TestRuleRequest, ::thingspect::api::TestRuleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::TestRuleRequest* req,
             ::thingspect::api::TestRuleResponse* resp) {
               return service->TestRule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuleAlarmService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuleAlarmService::Service, ::thingspect::api::TestAlarmRequest, ::thingspect::api::TestAlarmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuleAlarmService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::TestAlarmRequest* req,
             ::thingspect::api::TestAlarmResponse* resp) {
               return service->TestAlarm(ctx, req, resp);
             }, this)));
}

RuleAlarmService::Service::~Service() {
}

::grpc::Status RuleAlarmService::Service::CreateRule(::grpc::ServerContext* context, const ::thingspect::api::CreateRuleRequest* request, ::thingspect::api::Rule* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::CreateAlarm(::grpc::ServerContext* context, const ::thingspect::api::CreateAlarmRequest* request, ::thingspect::api::Alarm* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::GetRule(::grpc::ServerContext* context, const ::thingspect::api::GetRuleRequest* request, ::thingspect::api::Rule* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::GetAlarm(::grpc::ServerContext* context, const ::thingspect::api::GetAlarmRequest* request, ::thingspect::api::Alarm* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::UpdateRule(::grpc::ServerContext* context, const ::thingspect::api::UpdateRuleRequest* request, ::thingspect::api::Rule* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::UpdateAlarm(::grpc::ServerContext* context, const ::thingspect::api::UpdateAlarmRequest* request, ::thingspect::api::Alarm* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::DeleteRule(::grpc::ServerContext* context, const ::thingspect::api::DeleteRuleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::DeleteAlarm(::grpc::ServerContext* context, const ::thingspect::api::DeleteAlarmRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::ListRules(::grpc::ServerContext* context, const ::thingspect::api::ListRulesRequest* request, ::thingspect::api::ListRulesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::ListAlarms(::grpc::ServerContext* context, const ::thingspect::api::ListAlarmsRequest* request, ::thingspect::api::ListAlarmsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::TestRule(::grpc::ServerContext* context, const ::thingspect::api::TestRuleRequest* request, ::thingspect::api::TestRuleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuleAlarmService::Service::TestAlarm(::grpc::ServerContext* context, const ::thingspect::api::TestAlarmRequest* request, ::thingspect::api::TestAlarmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace thingspect
}  // namespace api


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api/thingspect_tag.proto

#include "api/thingspect_tag.pb.h"
#include "api/thingspect_tag.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace thingspect {
namespace api {

static const char* TagService_method_names[] = {
  "/thingspect.api.TagService/ListTags",
};

std::unique_ptr< TagService::Stub> TagService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TagService::Stub> stub(new TagService::Stub(channel, options));
  return stub;
}

TagService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListTags_(TagService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TagService::Stub::ListTags(::grpc::ClientContext* context, const ::thingspect::api::ListTagsRequest& request, ::thingspect::api::ListTagsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::thingspect::api::ListTagsRequest, ::thingspect::api::ListTagsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTags_, context, request, response);
}

void TagService::Stub::async::ListTags(::grpc::ClientContext* context, const ::thingspect::api::ListTagsRequest* request, ::thingspect::api::ListTagsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::thingspect::api::ListTagsRequest, ::thingspect::api::ListTagsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTags_, context, request, response, std::move(f));
}

void TagService::Stub::async::ListTags(::grpc::ClientContext* context, const ::thingspect::api::ListTagsRequest* request, ::thingspect::api::ListTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTags_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListTagsResponse>* TagService::Stub::PrepareAsyncListTagsRaw(::grpc::ClientContext* context, const ::thingspect::api::ListTagsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::thingspect::api::ListTagsResponse, ::thingspect::api::ListTagsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTags_, context, request);
}

::grpc::ClientAsyncResponseReader< ::thingspect::api::ListTagsResponse>* TagService::Stub::AsyncListTagsRaw(::grpc::ClientContext* context, const ::thingspect::api::ListTagsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTagsRaw(context, request, cq);
  result->StartCall();
  return result;
}

TagService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TagService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TagService::Service, ::thingspect::api::ListTagsRequest, ::thingspect::api::ListTagsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TagService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::thingspect::api::ListTagsRequest* req,
             ::thingspect::api::ListTagsResponse* resp) {
               return service->ListTags(ctx, req, resp);
             }, this)));
}

TagService::Service::~Service() {
}

::grpc::Status TagService::Service::ListTags(::grpc::ServerContext* context, const ::thingspect::api::ListTagsRequest* request, ::thingspect::api::ListTagsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace thingspect
}  // namespace api

